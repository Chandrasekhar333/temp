"""
Django settings for Simple-Extraction-Demo-Track project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variables (set in app.yaml)
SECRET_KEY = os.environ.get('SECRET_KEY', 'default-django-secret-key-for-local-dev-only')
# NEVER hardcode a production SECRET_KEY here!

# SECURITY WARNING: don't run with debug turned on in production!
# Get DEBUG from environment variables (set in app.yaml).
# 'True' string from env variable becomes boolean True.
DEBUG = 'True'

# Get ALLOWED_HOSTS from environment variables (set in app.yaml for production URL)
# For local development, '127.0.0.1' and 'localhost' are included.
# On App Engine, the GAE_APPLICATION_URL_HOST will be added.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
gae_host = os.environ.get('GAE_APPLICATION_URL_HOST')
if gae_host:
    ALLOWED_HOSTS.append(gae_host)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'extraction', # Your custom app
    'storages',   # Required for Google Cloud Storage integration
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Ensure ROOT_URLCONF and WSGI_APPLICATION are correct
ROOT_URLCONF = 'extraction.api.urls' # Or 'core.urls' if your main urls are in core
WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# Default to SQLite for local development if DB environment variables are not set
# This ensures it works locally without Cloud SQL setup by default
if os.environ.get('CLOUD_SQL_CONNECTION_NAME'):
    # On App Engine, connect to Cloud SQL via Unix socket
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2', # Change to 'django.db.backends.mysql' for MySQL
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': '/cloudsql/{}'.format(os.environ.get('CLOUD_SQL_CONNECTION_NAME')),
            'PORT': '', # Unix socket does not use a port
        }
    }
else:
    # For local development without Cloud SQL Proxy, use SQLite
    # If running Cloud SQL Proxy locally, you can change this to point to the proxy
    # e.g., HOST: '127.0.0.1', PORT: '5432'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# Configure Google Cloud Storage for static and media files
GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME') # Ensure this is set in app.yaml

if GS_BUCKET_NAME:
    # Google Cloud Storage for Static Files
    STATIC_URL = 'https://storage.googleapis.com/{}/{}/'.format(GS_BUCKET_NAME, 'static')
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_STATIC_ROOT = '/static/' # Path within the GCS bucket for static files

    # Google Cloud Storage for Media Files (user uploaded)
    MEDIA_URL = 'https://storage.googleapis.com/{}/{}/'.format(GS_BUCKET_NAME, 'media')
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_MEDIA_ROOT = '/media/' # Path within the GCS bucket for media files
else:
    # Fallback for local development if GS_BUCKET_NAME is not set
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    # Define STATIC_ROOT for `collectstatic` locally (important!)
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    # Define MEDIA_ROOT for user uploaded files locally (important!)
    MEDIA_ROOT = BASE_DIR / 'media'


# Where Django should look for static files
STATICFILES_DIRS = [
    BASE_DIR / "static", # A global static folder if you have one
    # You can add more paths here if specific apps have static files outside their default location
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Template settings: ensure APP_DIRS is True to find templates in app_name/templates/
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # Can be empty if all templates are in app directories
        'APP_DIRS': True, # This MUST be True for Django to find templates within app_name/templates/
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Ensure the database driver is installed (e.g., psycopg2-binary for PostgreSQL)
# You need to add 'psycopg2-binary' to your requirements.txt
# Or 'mysqlclient' for MySQL