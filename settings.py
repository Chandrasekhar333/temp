"""
Django settings for Simple-Extraction-Demo-Track project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from storages.backends.gcloud import GoogleCloudStorage # Add this import for GCS storages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# IMPORTANT: Keep the secret key used in production secret!
# CORRECTED: Get SECRET_KEY from environment variables by its NAME.
# It should be set in app.yaml as 'SECRET_KEY'.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-your-fallback-secret-key-for-local-testing-only')
# You should generate a strong random key and set it in your app.yaml (and never commit it).
# Example generation: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'


# SECURITY WARNING: don't run with debug turned on in production!
# CORRECTED: Set DEBUG to False explicitly for production.
# The app.yaml will ensure the env var is 'False'.
DEBUG = False

# ALLOWED_HOSTS for your App Engine application.
# CORRECTED: Get GAE_APPLICATION_URL_HOST from its environment variable NAME.
# 'localhost' and '127.0.0.1' are included for running management commands locally if needed.
ALLOWED_HOSTS = [
    os.environ.get('GAE_APPLICATION_URL_HOST', '127.0.0.1'),
    'localhost',
    '127.0.0.1'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Your project's apps would go here
    # e.g., 'your_app_name',
    'rest_framework', # If you are using Django REST Framework
    'django_filters', # If your models/APIs use filtering
    # Add any other apps your project requires here
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # Only if you decided to use Whitenoise locally, remove for GCS
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORRECTED: ROOT_URLCONF should reflect your inner project folder (core)
ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# CORRECTED: WSGI_APPLICATION should reflect your inner project folder (core)
WSGI_APPLICATION = 'core.wsgi.application'


# Database Configuration
# CORRECTED: Use conditional logic to switch between local and Cloud SQL settings
if os.getenv('GAE_APPLICATION_URL_HOST'): # This env var is only set on App Engine
    # Deployed to App Engine - Cloud SQL MySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql', # Uses mysqlclient
            # CORRECTED: Get variable by name
            'NAME': os.environ.get('DB_NAME'),
            # CORRECTED: Get variable by name
            'USER': os.environ.get('DB_USER'),
            # CORRECTED: Get variable by name
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            # 'HOST' points to the Unix socket for the Cloud SQL Proxy
            # CORRECTED: Get variable by name
            'HOST': '/cloudsql/{}'.format(os.environ.get('CLOUD_SQL_CONNECTION_NAME')),
            'PORT': '', # PORT is not needed when connecting via Unix socket
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'", # Recommended for MySQL
            }
        }
    }
else:
    # Running locally (e.g., using SQLite or local MySQL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# Google Cloud Storage Configuration for Static and Media Files
# Ensure 'django-storages' and 'google-cloud-storage' are in requirements.txt
# CORRECTED: Get variable by name
GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
GS_DEFAULT_ACL = 'publicRead' # Make files publicly readable (important for static assets)

# STATIC_URL will point to your GCS bucket for static files
# CORRECTED: Use the GS_BUCKET_NAME variable
STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# MEDIA_URL will point to your GCS bucket for media files (user-uploaded)
# CORRECTED: Use the GS_BUCKET_NAME variable
MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'